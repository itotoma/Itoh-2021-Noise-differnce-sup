Noisechange[["STP2"]]$GeneName %>% length()
Noisechange[["STP2"]]$GeneName
Noisechange[["STP2"]]$GeneName %>% Commonname()
Noisechange[["STP2"]]$GeneName %>% CommonName()
Noisechange[["STP1"]]$GeneName %>% CommonName()
STP12.common.noisechange <- intersect(Noise.only.change[["STP1"]]$GeneName, Noise.only.change[["STP2"]]$GeneName)
#Enrichment test for common noise change gene to common interaction
Noise.only.change <- lapply(NoiseOnlyDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(function(DF){DF %>% filter(starnum == 1)})
Mean.change <- lapply(MeanDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(function(DF){DF %>% filter(starnum == 1)})
STP12.common.noisechange <- intersect(Noise.only.change[["STP1"]]$GeneName, Noise.only.change[["STP2"]]$GeneName)
STP12.common.noisechange
STP12.common.meanchange <- intersect(Mean.change[["STP1"]]$V2, Mean.change[["STP2"]]$V2)
STP12.common.meanchange
Mean.change <- lapply(MeanDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(function(DF){DF %>% filter(starnum == 1)})
STP12.common.noisechange <- intersect(Noise.only.change[["STP1"]]$GeneName, Noise.only.change[["STP2"]]$GeneName)
STP12.common.meanchange <- intersect(Mean.change[["STP1"]]$V2, Mean.change[["STP2"]]$V2)
STP12.common.meanchange
print(CommonName(STP12.common.meranchange))
print(CommonName(STP12.common.meanchange))
print(CommonName(STP12.common.noisechange))
Noise.assigned.knownint
Noise.assigned.knownint[[1]] %>% filter(is.element(GeneName, STP12.common.noisechange))
print(CommonName(STP12.common.noisechange))
print(CommonName(STP12.common.meanchange))
#The proportion of common noise only in the whole noise only
Noise.only.whole <- c(Noisechange[["STP1"]]$GeneName, Noisechange[["STP2"]]$GeneName)
Noise.only.whole
Noise.only.whole %>% length()
Noise.only.whole %>% unique()
Noise.only.whole %>% unique() %>% length()
Noisechange[["STP1"]]$GeneName %>% length()
Noisechange[["STP2"]]$GeneName %>% length()
#Consistency of conservative and progressive analysis
STP2.target <- filter(Genetic.interaction, V1 == "STP2")
Clust.Noisechange <- ClusterNoiseOnlyDiffList[["STP2"]] %>% filter(starnum == 1)
All.Noisechange <- NoiseOnlyDiffList[["STP2"]] %>% filter(starnum == 1)
ConsistentNoiseChange <- All.Noisechange %>% left_join(Clust.Noisechange, by="GeneName")
#YOR074C CDC21
#YOR383C  FIT3
print(nrow(na.omit(ConsistencyNoiseChange))/nrow(ConsistencyNoiseChange))
ConsistentNoiseChange %>% na.omit() %>%
select(GeneName, ResultDiffResDisp) %>%
left_join(Yeast.gene.name, by=c("GeneName"="SGD")) %>% print()
#YOR074C CDC21
#YOR383C  FIT3
print(nrow(na.omit(ConsistencyNoiseChange))/nrow(ConsistencyNoiseChange))
ConsistentNoiseChange %>% na.omit() %>%
select(GeneName, ResultDiffResDisp) %>%
left_join(Yeast.gene.name, by=c("GeneName"="SGD")) %>% print()
Clust.Meanchange <- ClusterMeanDiffMergeList[["STP2"]] %>% filter(starnum == 1)
All.Meanchange <- MeanDiffList[["STP2"]] %>% filter(starnum == 1)
ConsistentMeanChange <- All.Meanchange %>% left_join(Clust.Meanchange, by="GeneName")
print(nrow(na.omit(ConsistencyMeanChange))/nrow(ConsistencyMeanChange))
ConsistentMeanChange %>% na.omit() %>%
select(GeneName, ResultDiffMean) %>%
left_join(Yeast.gene.name, by=c("GeneName"="SGD")) %>% print()
Clust.Noisechange <- lapply(ClusterNoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
Clust.Noisechange
ClusterNoiseOnlyDiffList
Clust.Noisechange <- lapply(ClusterNoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
Clust.Noisechange
All.Noisechange <- lapply(NoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
All.Noisechange
Clust.noisechange <- lapply(ClusterNoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
All.noisechange <- lapply(NoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
o
ConsistentNoiseChange <- lapply(c("STP1", "STP2"), function(strain){left_join(All.noisechange[[strain]], Cluster.noisechange[[strain]], by="GeneName")})
Cluster.noisechange <- lapply(ClusterNoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
All.noisechange <- lapply(NoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
ConsistentNoiseChange <- lapply(c("STP1", "STP2"), function(strain){left_join(All.noisechange[[strain]], Cluster.noisechange[[strain]], by="GeneName")})
ConsistentNoiseChange
ConsistentNoiseChange <- lapply(c("STP1", "STP2"), function(strain){left_join(All.noisechange[[strain]], Cluster.noisechange[[strain]], by="GeneName")}) %>% set_names(c("STP1", "STP2"))
ConsistentNoiseChange
Consistent.noisechange <- lapply(c("STP1", "STP2"), function(strain){left_join(All.noisechange[[strain]], Cluster.noisechange[[strain]], by="GeneName")}) %>% set_names(c("STP1", "STP2"))
Noisechange.all.clust.merge <- lapply(c("STP1", "STP2"), function(strain){left_join(All.noisechange[[strain]], Cluster.noisechange[[strain]], by="GeneName")}) %>% set_names(c("STP1", "STP2"))
Consistent.noisechange <- lapply(c("STP1", "STP2"), function(strain){na.omit(Noisechange.all.clust.merge[[strain]])})
Noisechange.all.clust.merge <- lapply(c("STP1", "STP2"), function(strain){left_join(All.noisechange[[strain]], Cluster.noisechange[[strain]], by="GeneName")}) %>% set_names(c("STP1", "STP2"))
Consistent.noisechange <- lapply(c("STP1", "STP2"), function(strain){na.omit(Noisechange.all.clust.merge[[strain]])})
Consistent.noisechange
Consistent.noisechange <- lapply(c("STP1", "STP2"),
function(strain){na.omit(Noisechange.all.clust.merge[[strain]]) %>%
left_join(Yeast.gene.name, by=c("GeneName"="SGD"))})
Consistent.noisechange
Consistent.noisechange <- lapply(c("STP1", "STP2"),  function(strain){na.omit(Noisechange.all.clust.merge[[strain]]) %>% left_join(Yeast.gene.name, by=c("GeneName"="SGD")) %>% select(Name, ResultDiffResDisp)})
Consistent.noisechange
Consistent.noisechange <- lapply(c("STP1", "STP2"),  function(strain){na.omit(Noisechange.all.clust.merge[[strain]]) %>% left_join(Yeast.gene.name, by=c("GeneName"="SGD")) %>% select(Name, ResultDiffResDisp)}) %>% set_names(c("STP1", "STP2"))
print(Consistent.noisechange)
Consistent.noisechange
Noisechange.all.clust.merge
Cluster.noisechange <- lapply(ClusterNoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
All.noisechange <- lapply(NoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
Noisechange.all.clust.merge <- lapply(c("STP1", "STP2"), function(strain){left_join(All.noisechange[[strain]], Cluster.noisechange[[strain]], by="GeneName")}) %>% set_names(c("STP1", "STP2"))
Consistent.noisechange <- lapply(c("STP1", "STP2"),  function(strain){na.omit(Noisechange.all.clust.merge[[strain]]) %>% left_join(Yeast.gene.name, by=c("GeneName"="SGD")) %>% select(Name, ResultDiffResDisp)}) %>% set_names(c("STP1", "STP2"))
print(Consistent.noisechange)
#Consistency of conservative and progressive analysis
Cluster.noisechange <- lapply(ClusterNoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
All.noisechange <- lapply(NoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
Noisechange.all.clust.merge <- lapply(c("STP1", "STP2"), function(strain){left_join(All.noisechange[[strain]], Cluster.noisechange[[strain]], by="GeneName")}) %>% set_names(c("STP1", "STP2"))
Consistent.noisechange <- lapply(c("STP1", "STP2"),  function(strain){na.omit(Noisechange.all.clust.merge[[strain]]) %>% left_join(Yeast.gene.name, by=c("GeneName"="SGD")) %>% select(Name, ResultDiffResDisp)}) %>% set_names(c("STP1", "STP2"))
print(Consistent.noisechange)
ClusterNoiseOnlyDiffList
#Consistency of conservative and progressive analysis
Cluster.noisechange <- lapply(ClusterNoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
All.noisechange <- lapply(NoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
Noisechange.all.clust.merge <- lapply(c("STP1", "STP2"), function(strain){left_join(All.noisechange[[strain]], Cluster.noisechange[[strain]], by="GeneName")}) %>% set_names(c("STP1", "STP2"))
Consistent.noisechange <- lapply(c("STP1", "STP2"),  function(strain){na.omit(Noisechange.all.clust.merge[[strain]]) %>% left_join(Yeast.gene.name, by=c("GeneName"="SGD")) %>% select(Name, ResultDiffResDisp)}) %>% set_names(c("STP1", "STP2"))
print(Consistent.noisechange)
# mean | nosie | noiseonly | noise mean | mean only
strain.list = c("STP1", "STP2")
dirlist = paste("YPD_WTvs", strain.list, "/All_YPD_WTvs", strain.list, "_zh0.99", sep="")
source("DifferenceTestAll.R")      # *X | ** | ** | NA | *X |
source("DifferenceTestCluster.R")  # *X | X* | X*
#Consistency of conservative and progressive analysis
Cluster.noisechange <- lapply(ClusterNoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
All.noisechange <- lapply(NoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
Noisechange.all.clust.merge <- lapply(c("STP1", "STP2"), function(strain){left_join(All.noisechange[[strain]], Cluster.noisechange[[strain]], by="GeneName")}) %>% set_names(c("STP1", "STP2"))
Consistent.noisechange <- lapply(c("STP1", "STP2"),  function(strain){na.omit(Noisechange.all.clust.merge[[strain]]) %>% left_join(Yeast.gene.name, by=c("GeneName"="SGD")) %>% select(Name, ResultDiffResDisp)}) %>% set_names(c("STP1", "STP2"))
print(Consistent.noisechange)
#Consistency of conservative and progressive analysis
Cluster.noisechange <- lapply(ClusterNoiseDiffList, function(DF){filter(DF, starnum == 1)})
All.noisechange <- lapply(NoiseDiffList, function(DF){filter(DF, starnum == 1)})
#Consistency of conservative and progressive analysis
Cluster.noisechange <- lapply(ClusterNoiseDiffMergeList, function(DF){filter(DF, starnum == 1)})
All.noisechange <- lapply(NoiseDiffList, function(DF){filter(DF, starnum == 1)})
Noisechange.all.clust.merge <- lapply(c("STP1", "STP2"), function(strain){left_join(All.noisechange[[strain]], Cluster.noisechange[[strain]], by="GeneName")}) %>% set_names(c("STP1", "STP2"))
Consistent.noisechange <- lapply(c("STP1", "STP2"),  function(strain){na.omit(Noisechange.all.clust.merge[[strain]]) %>% left_join(Yeast.gene.name, by=c("GeneName"="SGD")) %>% select(Name, ResultDiffResDisp)}) %>% set_names(c("STP1", "STP2"))
print(Consistent.noisechange)
STP2.Consensus.list
STP2_CGGCTC %>% filter(V1 == "#YOR382W")
STP2_CGGCTC %>%  head()
STP2_CGGCTC %>% filter(SGD == "YOR382W")
STP2_CNCACCNG %>% filter(SGD == "YOR382W")
STP2_CNCACCNG %>% filter(SGD == "YMR215W")
STP2_CGGCTC %>% filter(SGD == "YMR215W O")
STP2_CGGCTC %>% filter(SGD == "YMR215W")
#Consistency of conservative and progressive analysis
Cluster.noisechange <- lapply(ClusterNoiseDiffMergeList, function(DF){filter(DF, starnum == 1)})
All.noisechange <- lapply(NoiseDiffList, function(DF){filter(DF, starnum == 1)})
Noisechange.all.clust.merge <- lapply(c("STP1", "STP2"), function(strain){left_join(All.noisechange[[strain]], Cluster.noisechange[[strain]], by="GeneName")}) %>% set_names(c("STP1", "STP2"))
Consistent.noisechange <- lapply(c("STP1", "STP2"),  function(strain){na.omit(Noisechange.all.clust.merge[[strain]]) %>% left_join(Yeast.gene.name, by=c("GeneName"="SGD")) %>% select(Name, ResultDiffResDisp)}) %>% set_names(c("STP1", "STP2"))
print(Consistent.noisechange)
All.noisechange
All.noisechange[[2]] %>% na.omit()
All.noisechange[[2]] %>% na.omit() %>% nth(1)
All.noisechange[[2]] %>% na.omit() %>% nth(1) %>% CommonName()
Cluster.noisechange[[2]] %>% na.omit() %>% nth(1) %>% CommonName()
Genetic.interaction %>% filter(V1 == "STP2") %>% filter(V1 == "YEL065W")
#Consistency of conservative and progressive analysis
Cluster.noisechange <- lapply(ClusterNoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
All.noisechange <- lapply(NoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
All.noisechange[[2]] %>% na.omit() %>% nth(1) %>% CommonName()
Cluster.noisechange[[2]] %>% na.omit() %>% nth(1) %>% CommonName()
if(!exists(strain.list)){"Please set strainlist"}
strain.list
if(!exists("strain.list")){"Please set strainlist"}
if(!exists("strin.list")){"Please set strainlist"}
library(stringr)
library(plyr)
library(tidyverse)
library(scran)
library(BASiCS)
library(stringr)
library(plyr)
library(tidyverse)
library(scran)
library(BASiCS)
source("FunctionSetting.R")
# mean | nosie | noiseonly | noise mean | mean only
strain.list = c("STP1", "STP2")
dirlist = paste("YPD_WTvs", strain.list, "/All_YPD_WTvs", strain.list, "_zh0.99", sep="")
source("DifferenceTestAll.R")      # *X | ** | ** | NA | *X |
NoiseProp <- lapply(NoiseDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(Create.Fisher.input)
MeanProp <- lapply(MeanDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(Create.Fisher.input)
NoiseOnlyProp <- lapply(NoiseOnlyDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(Create.Fisher.input)
MeanOnlyProp <- lapply(MeanOnlyDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(Create.Fisher.input)
NoiseMeanProp <- lapply(NoiseMeanDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(Create.Fisher.input)
#Create plot
g1 <- Fisher.ggplot(MeanProp, strain.list)
MeanProp
#Extract enrichment test target
Common.Interaction <-lapply(strain.list, Extract.common.interacton, Genetic.interaction, strain.list) %>% set_names(strain.list)
#Extract enrichment test target
Common.Interactio
#Extract enrichment test target
Common.Interaction
Genetic.interaction = read.csv(file.path(dir, "GeneticInteraction(ORF).csv"), sep="", header = FALSE)
Genetic.interaction
#Extract enrichment test target
Common.Interaction <-lapply(strain.list, Extract.common.interacton, Genetic.interaction, strain.list) %>% set_names(strain.list)
Common.Interaction
Genetic.interaction
strain.list
Interaction.data = Genetic.interaction
reference = "STP1"
strain.list
print(paste("Reference:", reference))
GeneList = strain.list
print(GeneList)
Interaction.list = lapply(GeneList, function(I){
I1 = Interaction.data %>% filter(V1 == I)
}) %>% set_names(GeneList)
Common.target =
lapply(GeneList, function(gene){
intersect(Interaction.list[[reference]]$V2, Interaction.list[[gene]][,1]) %>% return()
}) %>% set_names(GeneList)
Common.interaction = Common.target[names(Common.target) != reference] %>% unlist() %>% unique() %>%
as.data.frame() %>% set_names("V2")
Common.interaction
Common.target
Interaction.list
GeneList
Interaction.list
Interaction.list[[reference]]$V2
Interaction.list[[gene]][,2]
Interaction.list[[gene]][,1]
Interaction.list[[gene]]
Interaction.list[["STP2"]][,1]
Interaction.list[["STP2"]][,2]
Extract.common.interacton <- function(reference, Interaction.data, strain.list){
print(paste("Reference:", reference))
GeneList = strain.list
print(GeneList)
Interaction.list = lapply(GeneList, function(I){
I1 = Interaction.data %>% filter(V1 == I)
}) %>% set_names(GeneList)
Common.target =
lapply(GeneList, function(gene){
intersect(Interaction.list[[reference]]$V2, Interaction.list[[gene]][,2]) %>% return()
}) %>% set_names(GeneList)
Common.interaction = Common.target[names(Common.target) != reference] %>% unlist() %>% unique() %>%
as.data.frame() %>% set_names("V2")
return(Common.interaction)
}
#Extract enrichment test target
Common.Interaction <-lapply(strain.list, Extract.common.interacton, Genetic.interaction, strain.list) %>% set_names(strain.list)
Common.Interaction
# Create input df for ficher's exact test
Enrichment.target.list = Common.Interaction
NoiseProp <- lapply(NoiseDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(Create.Fisher.input)
MeanProp <- lapply(MeanDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(Create.Fisher.input)
NoiseOnlyProp <- lapply(NoiseOnlyDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(Create.Fisher.input)
MeanOnlyProp <- lapply(MeanOnlyDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(Create.Fisher.input)
NoiseMeanProp <- lapply(NoiseMeanDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(Create.Fisher.input)
#Create plot
g1 <- Fisher.ggplot(MeanProp, strain.list)
g2 <- Fisher.ggplot(NoiseProp, strain.list)
g3 <- Fisher.ggplot(NoiseOnlyProp, strain.list)
g4 <- Fisher.ggplot(NoiseMeanProp, strain.list)
g5 <- Fisher.ggplot(MeanOnlyProp, strain.list)
g1
#g4 <- Fisher.ggplot(NoiseMeanProp, strain.list)
#g5 <- Fisher.ggplot(MeanOnlyProp, strain.list)
ggsave(g1, "STP_Mean_Main.png", width=8.00, height=5.00)
#g4 <- Fisher.ggplot(NoiseMeanProp, strain.list)
#g5 <- Fisher.ggplot(MeanOnlyProp, strain.list)
ggsave("STP_Mean_Main.png", g1, width=8.00, height=5.00)
ggsave("STP_NoiseOnly_Main.png", g3, width=8.00, height=5.00)
getwd()
ggtitle = "STP"
paste(ggtitle, "_Mean_Main.png", sep="")
getwd()
source("DifferenceTestCluster.R")  # *X | X* | X*
#Create plot Execute fischer's exact test
g1 <- Fisher.ggplot(ClusterMeanProp, strain.list)
g2 <- Fisher.ggplot(ClusterNoiseOnlyProp, strain.list)
g1
ggsave(paste(".Figures/", ggtitle, "_Mean_Sup.png", sep=""), g1, width=8.00, height=5.00)
ggsave(paste(ggtitle, "_Mean_Sup.png", sep=""), g1, width=8.00, height=5.00)
ggsave(paste(ggtitle, "_NoiseOnly_Sup.png", sep=""), g2, width=8.00, height=5.00)
strain.list = c("RTG1", "RTG3")
dirlist = paste("YPD_WTvs", strain.list, "/All_YPD_WTvs", strain.list, "_zh0.99", sep="")
ggtitle = "RTG"
source("DifferenceTestAll.R")      # ** | X* | XX
strain.list = c("RTG1", "RTG3")
dirlist = paste("YPD_WTvs", strain.list, "/All_YPD_WTvs", strain.list, "_zh0.99", sep="")
ggtitle = "RTG"
source("DifferenceTestAll.R")      # ** | X* | XX
source("DifferenceTestCluster.R")  # ** | XX | XX
NoiseOnlyProp <- lapply(NoiseOnlyDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(Create.Fisher.input)
g2 <- Fisher.ggplot(NoiseOnlyProp, strain.list)
ggsave(paste(ggtitle, "_NoiseOnly_Main.png", sep=""), g2, width=8.00, height=5.00)
ggsave(paste(ggtitle, "_Mean_Main.png", sep=""), g1, width=8.00, height=5.00)
source("DifferenceTestCluster.R")  # ** | XX | XX
strain.list = c("GZF3", "GAT1", "GLN3", "DAL80")
dirlist = paste("YPD_WTvs", strain.list, "/All_YPD_WTvs", strain.list, "_zh0.99", sep="")
strain.list = c("GZF3", "GAT1", "GLN3", "DAL80")
dirlist = paste("YPD_WTvs", strain.list, "/All_YPD_WTvs", strain.list, "_zh0.99", sep="")
ggtitle = "GATA"
source("DifferenceTestAll.R")      # XXX* | XX*X | XX*X
g1
#g3 <- Fisher.ggplot(NoiseProp, strain.list)
if(ggtitle == "GATA"){w = 11.0}else{w =8.00}
ggsave(paste(ggtitle, "_Mean_Main.png", sep=""), g1, width=w, height=5.00)
ggsave(paste(ggtitle, "_NoiseOnly_Main.png", sep=""), g2, width=w, height=5.00)
source("DifferenceTestCluster.R")
strain.list = c("GZF3", "GAT1", "DAL80")
source("DifferenceTestCluster.R")
g1
setwd("STP_GO/output")
Noise.assigned.knownint <- lapply(NoiseDiffList, Assign.known.interaction, Enrichment.target.list)
Mean.assigned.knownint <- lapply(MeanDiffList, Assign.known.interaction, Enrichment.target.list)
#Enrichment test for common noise change gene to common interaction
Noise.only.change <- lapply(NoiseOnlyDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(function(DF){DF %>% filter(starnum == 1)})
Mean.change <- lapply(MeanDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(function(DF){DF %>% filter(starnum == 1)})
STP12.common.noisechange <- intersect(Noise.only.change[["STP1"]]$GeneName, Noise.only.change[["STP2"]]$GeneName)
# mean | nosie | noiseonly | noise mean | mean only
strain.list = c("STP1", "STP2")
dirlist = paste("YPD_WTvs", strain.list, "/All_YPD_WTvs", strain.list, "_zh0.99", sep="")
ggtitle = "STP"
# mean | nosie | noiseonly | noise mean | mean only
strain.list = c("STP1", "STP2")
dirlist = paste("YPD_WTvs", strain.list, "/All_YPD_WTvs", strain.list, "_zh0.99", sep="")
ggtitle = "STP"
figure.width = 8.00
source("DifferenceTestAll.R")      # *X | ** | ** | NA | *X |
source("DifferenceTestCluster.R")  # *X | X* | X*
#Consistency of conservative and progressive analysis
Cluster.noisechange <- lapply(ClusterNoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
All.noisechange <- lapply(NoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
Noisechange.all.clust.merge <- lapply(c("STP1", "STP2"), function(strain){left_join(All.noisechange[[strain]], Cluster.noisechange[[strain]], by="GeneName")}) %>% set_names(c("STP1", "STP2"))
Consistent.noisechange <- lapply(c("STP1", "STP2"),  function(strain){na.omit(Noisechange.all.clust.merge[[strain]]) %>% left_join(Yeast.gene.name, by=c("GeneName"="SGD")) %>% select(Name, ResultDiffResDisp)}) %>% set_names(c("STP1", "STP2"))
print(Consistent.noisechange)
All.noisechange
All.noisechange <- lapply(NoiseDiffList, function(DF){filter(DF, starnum == 1)})
All.noisechange
All.noisechange <- lapply(NoiseDiffList, function(DF){filter(DF, starnum == 1)})
All.noisechange[[2]] %>% na.omit() %>% nth(1) %>% CommonName()
All.noisechange <- lapply(NoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
All.noisechange[[2]] %>% na.omit() %>% nth(1) %>% CommonName()
All.noisechange <- lapply(NoiseOnlyDiffList, function(DF){filter(DF, starnum == 1)})
All.noisechange[[1]] %>% na.omit() %>% nth(1) %>% CommonName()
All.noisechange <- lapply(NoiseDiffList, function(DF){filter(DF, starnum == 1)})
All.noisechange[[1]] %>% na.omit() %>% nth(1) %>% CommonName()
All.noisechange[[2]] %>% na.omit() %>% nth(1) %>% CommonName()
All.noisechange[[2]] %>% na.omit() %>% nth(1)
Cluster.noisechange[[2]] %>% na.omit() %>% nth(1)
Cluster.noisechange[[2]] %>% na.omit() %>% nth(1) %>% CommonName()
#Consistency of conservative and progressive analysis
Cluster.noisechange <- lapply(ClusterNoiseDiffMergeList, function(DF){filter(DF, starnum == 1)})
Cluster.noisechange[[2]] %>% na.omit() %>% nth(1) %>% CommonName()
All.noisechange
print(Consistent.noisechange)
#Consistency of conservative and progressive analysis
Cluster.noisechange <- lapply(ClusterNoiseDiffMergeList, function(DF){filter(DF, starnum == 1)})
All.noisechange <- lapply(NoiseDiffList, function(DF){filter(DF, starnum == 1)})
Noisechange.all.clust.merge <- lapply(c("STP1", "STP2"), function(strain){left_join(All.noisechange[[strain]], Cluster.noisechange[[strain]], by="GeneName")}) %>% set_names(c("STP1", "STP2"))
Consistent.noisechange <- lapply(c("STP1", "STP2"),  function(strain){na.omit(Noisechange.all.clust.merge[[strain]]) %>% left_join(Yeast.gene.name, by=c("GeneName"="SGD")) %>% select(Name, ResultDiffResDisp)}) %>% set_names(c("STP1", "STP2"))
print(Consistent.noisechange)
print(Consistent.noisechange)
#Consistency of conservative and progressive analysis
Cluster.noisechange <- lapply(ClusterNoiseDiffMergeList, function(DF){filter(DF, starnum == 1)})
All.noisechange <- lapply(NoiseDiffList, function(DF){filter(DF, starnum == 1)})
Noisechange.all.clust.merge <- lapply(c("STP1", "STP2"), function(strain){left_join(All.noisechange[[strain]], Cluster.noisechange[[strain]], by="GeneName")}) %>% set_names(c("STP1", "STP2"))
Consistent.noisechange <- lapply(c("STP1", "STP2"),  function(strain){na.omit(Noisechange.all.clust.merge[[strain]]) %>% left_join(Yeast.gene.name, by=c("GeneName"="SGD")) %>% select(Name, ResultDiffResDisp)}) %>% set_names(c("STP1", "STP2"))
print(Consistent.noisechange)
#Discussion:
#Based on our concepts, the candidate of redundant regulated genes,
#which detected by noise change without mean change (noise-only change),
#must be common to the deletion strain of redundant gene pair.
Noise.only.change <- lapply(NoiseOnlyDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(function(DF){DF %>% filter(starnum == 1)})
Mean.change <- lapply(MeanDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(function(DF){DF %>% filter(starnum == 1)})
STP12.common.noisechange <- intersect(Noise.only.change[["STP1"]]$GeneName, Noise.only.change[["STP2"]]$GeneName)
STP12.common.meanchange <- intersect(Mean.change[["STP1"]]$V2, Mean.change[["STP2"]]$V2)
print(CommonName(STP12.common.noisechange))
print(CommonName(STP12.common.meanchange))
STP12.common.noisechange.known.int <- Genetic.interaction %>% filter(V1 == "STP2") %>% filter(is.element(V2, STP12.common.noisechange))
STP12.common.noisechange.known.int
STP12.common.noisechange.with.known.int <- Genetic.interaction %>% filter(V1 == "STP2") %>% filter(is.element(V2, STP12.common.noisechange))
STP12.common.noisechange.with.known.int <- Genetic.interaction %>% filter(V1 == "STP2") %>% filter(is.element(V2, STP12.common.noisechange)) %>% nth(2)
print(CommonName(STP12.common.noisechange.with.known.int))
print(CommonName(STP12.common.noisechange))
print(CommonName(STP12.common.meanchange))
print(CommonName(STP12.common.noisechange.with.known.int))
print(CommonName(STP12.common.noisechange))
print(CommonName(STP12.common.noisechange.with.known.int))
print(CommonName(STP12.common.meanchange))
#Discussion
#Not all noise-only change genes are common to the ΔSTP1 and ΔSTP2.
#The total number of noise-only change genes in the ΔSTP1 is 15,
#and that of ΔSTP2 is 8. As described above. Most noise-only
#change genes are detected only in ΔSTP1 or ΔSTP2.
Noise.only.whole <- c(Noisechange[["STP1"]]$GeneName, Noisechange[["STP2"]]$GeneName) %>% unique()
Noise.only.change
#Discussion
#Not all noise-only change genes are common to the ΔSTP1 and ΔSTP2.
#The total number of noise-only change genes in the ΔSTP1 is 15,
#and that of ΔSTP2 is 8. As described above. Most noise-only
#change genes are detected only in ΔSTP1 or ΔSTP2.
Noise.only.whole <- c(Noise.only.change[["STP1"]]$GeneName, Noise.only.change[["STP2"]]$GeneName) %>% unique()
Noise.only.whole
length(STP12.common.noisechange)/length(Noise.only.whole)
Noise.only.whole
print(length(Noise.only.change[["STP1"]]$GeneName))
Number.of.noiseonly.STP1 <- length(Noise.only.change[["STP1"]]$GeneName) %>% print()
Number.of.noiseonly.STP1
Number.of.noiseonly.STP1 <- length(Noise.only.change[["STP1"]]$GeneName) %>% print()
Number.of.noiseonly.STP1 <- length(Noise.only.change[["STP2"]]$GeneName) %>% print()
Proportion.of.common.noiseonly <- length(STP12.common.noisechange)/length(Noise.only.whole) %>% print()
length(STP12.common.noisechange)
length(Noise.only.whole)
Proportion.of.common.noiseonly <- length(STP12.common.noisechange)/length(Noise.only.whole) %>% print()
Proportion.of.common.noiseonly <- (length(STP12.common.noisechange)/length(Noise.only.whole)) %>% print()
setdiff(WholeNoiseOnly, Common.noisechange) %>% CommonName() %>% print()
#GO enrichment analysis of noise change gene
Noise.change <- lapply(NoiseDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(function(DF){DF %>% filter(starnum == 1)})
Noise.change
#GO enrichment analysis of noise change gene
Unknown.noise.change <- lapply(NoiseDiffList, Assign.known.interaction, Enrichment.target.list) %>% lapply(function(DF){DF %>% filter(starnum == 1)} %>% filter(TFTarget == "F"))
Unknown.noise.change
Unknown.noise.change[["STP2"]]$GeneName %>% CommonName()
Unknown.noise.change[["STP2"]]$GeneName %>% CommonName() %>% sort()
STP1.unknown.noise.change <- Unknown.noise.change[["STP1"]]$GeneName %>% CommonName() %>% sort()
STP2.unknown.noise.change <- Unknown.noise.change[["STP2"]]$GeneName %>% CommonName() %>% sort()
STP1.unknown.noise.change
setwd("/Users/itoutouma/Lab_Analysis/scRNAseq/STP_GO/Output")
filename <- "STP1NovelRedNoiseGO"
GOSlimMap <- read.csv(paste(filename, ".csv", sep=""), sep="\t")
GOdf <- select(GOSlimMap, GOID, TERM, ANNOTATED_GENES)
GOdf2 <- data.frame()
for(i in c(1:dim(GOdf)[1])){
tmp <-
data.frame(
GOID = GOdf[i,]$GOID,
TERM = GOdf[i,]$TERM,
ANNOTATED_GENES = strsplit(GOdf[i,]$ANNOTATED_GENES, ", ")[[1]]
)
GOdf2 <- rbind(GOdf2, tmp)
}
GOdf2 = GOdf2 %>% mutate(
ANNOTATED_GENES =
ifelse(ANNOTATED_GENES == "YEL065W", "SIT1", ANNOTATED_GENES)
)
paster <- function(chr){
paste(chr, collapse= ",\n ") %>% return()
}
library(tidyverse)
library(gt)
a <- GOdf2 %>% group_by(ANNOTATED_GENES) %>%
dplyr::summarise(GOIDcat = paster(TERM)) %>%
left_join(Yeast.gene.name, by=c("ANNOTATED_GENES"="SGD")) %>%
select(ANNOTATED_GENES, GOIDcat) %>%
set_names(c("Gene", "GO Term"))
table <- a %>% gt()
print(table)
a
GOdf
STP1.unknown.noise.change
STP1.unknown.noise.change %>% length()
STP2.unknown.noise.change
#Consistency of conservative and progressive analysis
Cluster.noisechange <- lapply(ClusterNoiseDiffMergeList, function(DF){filter(DF, starnum == 1)})
All.noisechange <- lapply(NoiseDiffList, function(DF){filter(DF, starnum == 1)})
Noisechange.all.clust.merge <- lapply(c("STP1", "STP2"), function(strain){left_join(All.noisechange[[strain]], Cluster.noisechange[[strain]], by="GeneName")}) %>% set_names(c("STP1", "STP2"))
Consistent.noisechange <- lapply(c("STP1", "STP2"),  function(strain){na.omit(Noisechange.all.clust.merge[[strain]]) %>% left_join(Yeast.gene.name, by=c("GeneName"="SGD")) %>% select(Name, ResultDiffResDisp)}) %>% set_names(c("STP1", "STP2"))
print(Consistent.noisechange)
STP2.unknown.noise.change <- Unknown.noise.change[["STP2"]]$GeneName %>% CommonName() %>% sort()
STP2.unknown.noise.change
STP1.unknown.noise.change <- Unknown.noise.change[["STP1"]]$GeneName %>% CommonName() %>% sort()
STP2.unknown.noise.change <- Unknown.noise.change[["STP2"]]$GeneName %>% CommonName() %>% sort()
print(STP1.unknown.noise.change)
print(STP2.unknown.noise.change)
#Consistency of conservative and progressive analysis
Cluster.noisechange <- lapply(ClusterNoiseDiffMergeList, function(DF){filter(DF, starnum == 1)})
All.noisechange <- lapply(NoiseDiffList, function(DF){filter(DF, starnum == 1)})
Noisechange.all.clust.merge <- lapply(c("STP1", "STP2"), function(strain){left_join(All.noisechange[[strain]], Cluster.noisechange[[strain]], by="GeneName")}) %>% set_names(c("STP1", "STP2"))
Consistent.noisechange <- lapply(c("STP1", "STP2"),  function(strain){na.omit(Noisechange.all.clust.merge[[strain]]) %>% left_join(Yeast.gene.name, by=c("GeneName"="SGD")) %>% select(Name, ResultDiffResDisp)}) %>% set_names(c("STP1", "STP2"))
print(Consistent.noisechange)
Noisechange.all.clust.merge
Genetic.interaction %>% filter(V1 == "STP2") %>% filter(V1 == "YOR382W")
Genetic.interaction %>% filter(V1 == "STP2") %>% filter(V2 == "YOR382W")
Genetic.interaction %>% filter(V1 == "STP1") %>% filter(V2 == "YOR382W")
Unknown.noise.change.cluster <- lapply(ClusterNoiseDiffMergeList, Assign.known.interaction, Enrichment.target.list) %>% lapply(function(DF){DF %>% filter(starnum == 1)} %>% filter(TFTarget == "F"))
STP1.unknown.noise.change.cluster <- Unknown.noise.change.cluster[["STP1"]]$GeneName %>% CommonName() %>% sort()
STP2.unknown.noise.change.cluster <- Unknown.noise.change.cluster[["STP2"]]$GeneName %>% CommonName() %>% sort()
print(STP1.unknown.noise.change.cluster)
print(STP2.unknown.noise.change.cluster)
print(STP1.unknown.noise.change.cluster)
STP1.unknown.noise.change.cluster
STP1.unknown.noise.change.cluster %>% as.data.frame() %>%
write.table("STP1_UnknownNoise_Sup.csv", row.names = F, col.names = F)
getwd()
STP1.unknown.noise.change.cluster
STP2.unknown.noise.change.cluster
getwd()
setwd("/Users/itoutouma/Lab_Analysis/ItohNoise2021")
setwd("/Users/itoutouma/Lab_Analysis/Itoh2021Noise")
setwd("/Users/itoutouma/Lab_Analysis/Itoh2021Noise/NoiseChangeGeneList/")
STP2.unknown.noise.change.cluster %>% as.data.frame() %>%
write.table("STP2_UnknownNoise_Sup.csv", row.names = F, col.names = F)
#Result
#We consider that the consistent results of conservative
#and progressive analysis should be reliable.
#We could find the three consistent genes that show noise change
#both of conservative and progressive analysis
Cluster.noisechange <- lapply(ClusterNoiseDiffMergeList, function(DF){filter(DF, starnum == 1)})
All.noisechange <- lapply(NoiseDiffList, function(DF){filter(DF, starnum == 1)})
Noisechange.all.clust.merge <- lapply(c("STP1", "STP2"), function(strain){left_join(All.noisechange[[strain]], Cluster.noisechange[[strain]], by="GeneName")}) %>% set_names(c("STP1", "STP2"))
Consistent.noisechange <- lapply(c("STP1", "STP2"),  function(strain){na.omit(Noisechange.all.clust.merge[[strain]]) %>% left_join(Yeast.gene.name, by=c("GeneName"="SGD")) %>% select(Name, ResultDiffResDisp)}) %>% set_names(c("STP1", "STP2"))
print(Consistent.noisechange)
Consistent.noisechange <- lapply(c("STP1", "STP2"),  function(strain){na.omit(Noisechange.all.clust.merge[[strain]]) %>% left_join(Yeast.gene.name, by=c("GeneName"="SGD")) %>% select(Name, ResultDiffResDisp)}) %>% set_names(c("STP1", "STP2"))
print(Consistent.noisechange)
#Result
#We consider that the consistent results of conservative
#and progressive analysis should be reliable.
#We could find the three consistent genes that show noise change
#both of conservative and progressive analysis
Cluster.noisechange <- lapply(ClusterNoiseDiffMergeList, function(DF){filter(DF, starnum == 1)})
All.noisechange <- lapply(NoiseDiffList, function(DF){filter(DF, starnum == 1)})
Noisechange.all.clust.merge <- lapply(c("STP1", "STP2"), function(strain){left_join(All.noisechange[[strain]], Cluster.noisechange[[strain]], by="GeneName")}) %>% set_names(c("STP1", "STP2"))
Consistent.noisechange <- lapply(c("STP1", "STP2"),  function(strain){na.omit(Noisechange.all.clust.merge[[strain]]) %>% left_join(Yeast.gene.name, by=c("GeneName"="SGD")) %>% select(Name, ResultDiffResDisp)}) %>% set_names(c("STP1", "STP2"))
print(Consistent.noisechange)
getwd()
